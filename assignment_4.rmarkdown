---
title: "assignment_4"
format: html
editor: visual
---


# Regionale data fra Eurostat

**MSB105 - Data Science\
Gruppe 4: Hanna Sundal Bjerkreim & Elvar Solheim**


```{r}
#| label: setup
#| message: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
```


I denne oppgaven skal vi hente ned regionale data fra EU sin statistikk organisasjon (Eurostat).
Dataene vil vi aggregere på NUTS3-, NUTS2-, og NUTS1-nivå.
Vi skal ordne dataene i list-columns ved hjelp av pakken tidyverse.
Dette muliggjør "nested" data om brutto-nasjonalprodukt, befolkning, BNP per person og beregnet Gini-koeffisient for likhet/ulikhet mellom regioner med hensyn til verdiskaping i perioden 2000-2020.
Etter organiseringen av data skal vi produsere ulike plots og estimere noen enkle modeller.

## toc.eurostat


```{r}
# Henter innholdsfortegnelsen fra Eurostat
toc_txt <- get_eurostat_toc(mode = "txt")
```


## GDP NUTS3


```{r}
gdp_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Gg][Dd][Pp]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

```{r}
gdp_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```

```{r}
# description nama_10r_3gdp
dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
```

```{r}
dsd_gdp |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions 
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
  id = "nama_10r_3gdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "MIO_PPS_EU27_2020"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(
    gdp = 1000000 * values
  ) |> 
  select(-c(unit, values)) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```


## Populasjonsdata

### Oppgave 1


```{r}
pop_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Pp][Oo][Pp][Uu][Ll][Aa][Tt][Ii][Oo][Nn] '
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

```{r}
pop_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```


### Oppgave 2


```{r}
dsd_pop <- get_eurostat_dsd("nama_10r_3popgdp")
```

```{r}
dsd_pop |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

```{r}
nama_10r_3popgdp <- get_eurostat_data(
  id = "nama_10r_3popgdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "THS"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```


## Alternative populasjonsdata

### Oppgave 3


```{r}
dsd_pop2 <- get_eurostat_dsd("demo_r_pjanaggr3")
```

```{r}
dsd_pop |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

```{r}
demo_r_pjanaggr3 <- get_eurostat_data(
  id = "demo_r_pjanaggr3",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "A"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```


## Bearbeiding av populasjonsdata

### Oppgave 4

### Oppgave 5

### Oppgave 6

### Oppgave 7

### Oppgave 8

### Oppgave 9

### Oppgave 10

### Oppgave 11

### Oppgave 12

### Oppgave 13

### Oppgave 14

### Oppgave 15

## Beregning av Gini

### Oppgave 16

### Oppgave 17

### Oppgave 18

## "Nestete" datastruktur

Oppgave 19

Oppgave 20

Oppgave 21

Oppgave 22

## Plots

Oppgave 23

Oppgave 24

## Hvordan er verdiskapningen fordelt mellom regionene i ulike land?

Spania

Oppgave 25

Oppgave 26

Oppgave 27

Oppgave 28

Tyskland

Oppgave 29

Oppgave 30

Frankrike

Oppgave 31

Oppgave 32

Oppgave 33

Oppgave 34

Oppgave 35

## Enkle modeller

"Data Science" modeller

Oppgave 36

Oppgave 37

Oppgave 38

Oppgave 39

Oppgave 40

Oppgave 41

Oppgave 42

Oppgave 43

Panel modell

Oppgave 44

Oppgave 45

Oppgave 46

