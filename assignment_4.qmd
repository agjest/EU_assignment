---
title: "assignment_4"
format: html
editor: visual
---

# Regionale data fra Eurostat

**MSB105 - Data Science\
Gruppe 4: Hanna Sundal Bjerkreim & Elvar Solheim**

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
```

I denne oppgaven skal vi hente ned regionale data fra Eurostat, som er EU sin statistikk organisasjon.
Vi skal fokusere på landene Østerrike, Tyskland, Danmark, Frankrike, Hellas, Spania, Italia, Nederland, Belgia, Irland, Polen, Portugal, Norge, Sverige, Finland og Sveits.
Vi skal hente data fra Eurostat ved hjelp av en api fra pakken restapi.
Vi henter regionale GDP data og populasjonsdata for landene på NUTS3 nivå og aggregerer senere opp til NUTS2, NUTS1 og NUTSc nivå.
Vi skal ordne dataene i list-columns, noe som muliggjør et "nested" datasett som inneholder data om brutto-nasjonalprodukt, befolkning, BNP per person og beregnet Gini-koeffisient.
Dataene vil dekke perioden 2000-2020.
Når "nested" datasett er på plass, skal vi produsere ulike plots og estimere noen enkle modeller.

## toc.eurostat

Vi starter med å hente innholdsfortegnelsen fra Eurostat.

```{r}
# Henter innholdsfortegnelse i tekstversjon
toc_txt <- get_eurostat_toc(mode = "txt")
```

## GDP NUTS3

Videre laster vi inn data for brutto-nasjonalprodukt (GDP) på NUTS3-nivå.
Først finner vi en oversikt over Eurostat sine tabeller som både inneholder *GDP* og *NUTS3*.

```{r}
gdp_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Gg][Dd][Pp]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

```{r}
gdp_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```

Vi velger å bentytte tabellen med kode nama_10r_3gdp, med følgende forklarende tekst: «Gross domestic product (GDP) at current market prices by NUTS 3 regions».
Vi henter videre «Data Structure Definition» (DSD) for å få en oversikt over hva som finnes i dette datasettet.

```{r}
# DSD for nama_10r_3gdp
dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
```

```{r}
dsd_gdp |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

Vi velger MIO_PPS_EU27_2020 som mål på GDP.
Dette gir GDP i løpende priser (million Euro).

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions 
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
  id = "nama_10r_3gdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "MIO_PPS_EU27_2020"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(
    gdp = 1000000 * values
  ) |> 
  select(-c(unit, values)) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```

## Populasjonsdata

### Oppgave 1

Videre skal vi laste inn data for totalbefolkningen i landene på NUTS3-nivå.
Vi søker etter tabeller fra Eurostat som inneholder både *population* og *NUTS 3*.

```{r}
pop_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Pp][Oo][Pp][Uu][Ll][Aa][Tt][Ii][Oo][Nn] '
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

```{r}
pop_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```

Vi bruker tabellen med teksten: «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».
Denne tabellen har manglende data for noen regioner, og vi skal senere supplere med data fra tabellen med teksten «Population on 1 January by broad age group, sex and NUTS 3 region».

### Oppgave 2

Tabellen med teksten «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions» har koden nama_10r_3popgdp.
Vi laster ned Data Structure Definition (DSD) for denne tabellen.

```{r}
# DSD for nama_10r_3popgdp
dsd_pop <- get_eurostat_dsd("nama_10r_3popgdp")
```

```{r}
dsd_pop |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

Ut i fra DSD formulerer vi en spørring mot Eurostat og laster ned datasettet «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

```{r}
# Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions
# id: nama_10r_3popgdp
nama_10r_3popgdp <- get_eurostat_data(
  id = "nama_10r_3popgdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "THS"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(pop.x = values * 1000
         ) |>
  select(-c(unit, values)
         ) |>
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```

## Alternative populasjonsdata

### Oppgave 3

Vi skal nå hente ned befolningsdata fra tabellen med teksten «Population on 1 January by broad age group, sex and NUTS 3 region».
Denne tabellen har koden demo_r_pjanaggr3.

```{r}
# DSD for demo_r_pjanaggr3
dsd_pop2 <- get_eurostat_dsd("demo_r_pjanaggr3")
```

```{r}
dsd_pop2 |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

```{r}
# Population on 1 January by broad age group, sex and NUTS 3 region
# id: demo_r_panjanaggr3
demo_r_pjanaggr3 <- get_eurostat_data(
  id = "demo_r_pjanaggr3",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "NR",
    sex = "T",
    age = "TOTAL"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE,
  ) %>%
  select(geo, time, pop.y = values) |>
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```

## Bearbeiding av populasjonsdata

Vi tar utgangspunkt i populasjonsdata fra tabellen «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions» og supplerer med data fra tabellen «Population on 1 January by broad age group, sex and NUTS 3 region» der data mangler.

### Oppgave 4

Vi sjekker hvilke NUTS 3 soner som inngår i tabellen "Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions", men ikke i tabellen "Population on 1 January by broad age group, sex and NUTS 3 region".

```{r}
setdiff(nama_10r_3popgdp$geo, demo_r_pjanaggr3$geo)
```

### Oppgave 5

Vi sjekker også hvilke NUTS 3 soner som inngår i tabellen «Population on 1 January by broad age group, sex and NUTS 3 region», men ikke i tabellen «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

```{r}
setdiff(demo_r_pjanaggr3$geo, nama_10r_3popgdp$geo )
```

### Oppgave 6

Vi skal nå foreta en full join av de to populasjonstabellene, for å få ett samlet datasett med populasjonsdata.

```{r}
# Slår sammen populasjonstabellene
full_pop_nuts3 <- full_join(nama_10r_3popgdp,demo_r_pjanaggr3)
```

### Oppgave 7

Vi sjekker sonene i de nye datasettet full_pop_nuts3 mot dem vi har i GDP tabellen, nama_10_3gdp.

```{r}
setdiff(full_pop_nuts3$geo, nama_10r_3gdp$geo)
```

### Oppgave 8

Vi sjekker også om sonene i GDP tabellen mot dem vi har i full_pop_nuts3.

```{r}
setdiff(nama_10r_3gdp$geo, full_pop_nuts3$geo)
```

### Oppgave 9

\*\*ZZZ er en slags oppsamlingskategori i gdp-dataene.
Vi har ikke tilsvarende for befolkning så disse har vi ingen bruk for.
Vi fjerner \*\*ZZZ sonene fra nama_10r_3gdp.

```{r}
# fjerner **ZZZ regioner
nama_10r_3gdp <- nama_10r_3gdp |>
  filter(!grepl("ZZZ$", geo))
```

### Oppgave 10

Vi ønsker å benytte dataene fra «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions» (pop.x) der disse eksisterer og supplere med data fra «Population on 1 January by broad age group, sex and NUTS 3 region» (pop.y) der vi mangler data.
Mangler vi data i begge tabellene setter vi verdien lik NA.Vi lager en ny variabel pop i full_pop_nuts3 og dropper deretter variablene pop.x og pop.y.

```{r}
# Supplerer med data fra demo_r_pjanaggr3
full_pop_nuts3 <- full_pop_nuts3 |> 
  mutate(
    pop = ifelse(
      test = is.na(pop.x) == TRUE, 
      yes = pop.y, 
      no = pop.x
      )
  ) |> 
  select(-pop.x, -pop.y)
```

### Oppgave 11

Videre undersøkes det om vi har noen NUTS 3 soner med pop lik 0.
Disse rekodes til NA.

```{r}
# Undersøker om det er NUTS3 regioner med pop = 0
if (any(full_pop_nuts3 == 0)) {
  print("Verdier lik 0.")
} else {
  print("Ingen verdier lik 0.")
}
```

```{r}
# Rekoder NUTS3 regioner med pop = 0 til NA
full_pop_nuts3 <- full_pop_nuts3 |>
  mutate(
    pop = ifelse(
      test = pop == 0, 
      yes = NA,
      no = pop
      )
  )
```

### Oppgave 12

Vi har et helt sett av NUTS3 regioner som finnes i befolkningsdata, men ikke i gdp datasettet.
Vi fjerner dem ved hjelp av en left_join der x er gdp-data.
Da legger vi bare til befolkningsdata for de sonene hvor vi har gdp-data.

Vi utfører en left_join() der populasjonsdata blir lagt til datasettet som innholder GDP-data.

```{r}
# Slår sammen GDP datasett og populasjonsdatasett
eu_data <- nama_10r_3gdp |>
  left_join(full_pop_nuts3, join_by(geo, time) )
```

```{r}
dim(eu_data)
```

Vi lager en ny variabel country fra de to første karakterene i NUTS3.

```{r}
# Ny variabel "country"
eu_data <- eu_data |> 
  mutate(
    country = str_sub(geo, start = 1L, end = 2L)
  )
```

Vi sjekker så antall NUTS3 i hvert land.

```{r}
eu_data |> 
  distinct(geo, .keep_all = TRUE) |> 
  group_by(country) |> 
  summarise(Antall = n(), .groups = "drop")
```

Vi sjekker også summary for variablene i eu_data.

```{r}
eu_data |> 
  summary()
```

Vi endrer navn og rekkefølge på variabelen i eu_data.

```{r}
eu_data <- eu_data |> 
  select(country, NUTS3 = geo, year = time, gdp, pop)
```

```{r}
# Rydder opp
# Sletter alle objekt utenom eu_data
rm(list = setdiff(ls(), "eu_data"))
```

### Oppgave 13

Vi beregner gdp_per_capita for hver NUTS3 region for årene 2000-2020 og avrunder til 2 desimaler.

```{r}
# Ny variabel "gdp_per_capita"
eu_data <- eu_data |>
  mutate(gdp_per_capita = round(gdp / pop, 2))

```

Sjekker summary gdp_per_capita.

```{r}
eu_data |>
  select(gdp_per_capita) |> 
  summary()
```

### Oppgave 14

Vi bruker case_when() for å legge til variabelen country_name.
Denne variabelen inkluderer fullt navn på landene.

```{r}
# Ny variabel "country_name"
eu_data <- eu_data |>
  mutate(country_name = case_when(
    country == "AT" ~ "Østerrike",
    country == "BE" ~ "Belgia",
    country == "CH" ~ "Sveits", 
    country == "DE" ~ "Tyskland", 
    country == "DK" ~ "Danmark", 
    country == "EL" ~ "Hellas", 
    country == "ES" ~ "Spania", 
    country == "FI" ~ "Finland", 
    country == "FR" ~ "Frankrike", 
    country == "IE" ~ "Irland", 
    country == "IT" ~ "Italia", 
    country == "NL" ~ "Nederland", 
    country == "NO" ~ "Norge", 
    country == "PL" ~ "Polen", 
    country == "PT" ~ "Portugal", 
    country == "SE" ~ "Sverige"
  ))
```

### Oppgave 15

Vi lager de tre variablene NUTS2, NUTS1 og NUTSc fra NUTS3.
NUTSc er vår egen «oppfinnelse» og angir land (to første karakterer i NUTS kode).

```{r}
# Nye variabler "NUTS2", "NUTS1" og "NUTSc"
eu_data <- eu_data |>
  mutate(
    NUTS2 = str_sub(NUTS3, 1, 4), 
    NUTS1 = str_sub(NUTS3, 1, 3), 
    NUTSc = str_sub(NUTS3, 1, 2)   
  ) |>
  select(
    country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita
  )
```

## Beregning av Gini-koeffisient

Vi benytter Gini-koeffisient for å undersøke hvor jevnt *verdiskapningen* er fordelt mellom regioner.
Vi skal nå beregne Gini for hvert år på NUTS2, NUTS1 og NUTSc nivå.
Vi vil beregne Gini utfra gdp_per_capita og pop i NUTS3 for alle aggregeringsnivåene.

### Oppgave 16

Vi begynner med å beregne Gini-koeffisienten for NUTS2.
Vi inkluderer også variablene "pop" og "gdp" for NUTS2.
Disse vil være summen av de tilsvarende NUTS3 nivå.

```{r}
# Gini-koeffisient for NUTS2
gini_NUTS2 <- eu_data |> 
  group_by(NUTS2, country_name, country, year) |>
  summarise(
    gini_nuts2 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTS2, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nuts2)
```

```{r}
gini_NUTS2 |> 
  summary() |> 
  print(width = 80)
```

Vi sjekker observasjoner med Gini avrundet til 0,0000.

```{r}
gini_NUTS2 |> 
  select(-country_name) |> 
  filter(gini_nuts2 < 0.001)
```

### Oppgave 17

Vi beregner nå Gini-koeffisienter på NUTS1 nivå.
Vi inkluderer også variablene "pop" og "gdp" for NUTS1.
Disse vil være summen av de tilsvarende NUTS2 nivå.

```{r}
# Gini-koeffisient for NUTS1
gini_NUTS1 <- eu_data |> 
  group_by(NUTS1, country_name, country, year) |> 
  summarise(
    gini_nuts1 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTS1, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nuts1)
```

```{r}
gini_NUTS1 |> 
  summary() |> 
  print(width = 80)
```

### Oppgave 18

Vi beregner nå Gini-koeffisienter på NUTSc nivå.
Vi inkluderer også variablene "pop" og "gdp" for NUTSc.
Disse vil være summen av de tilsvarende NUTS1 nivå.

```{r}
# Gini-koeffisient for NUTSc
gini_NUTSc <- eu_data |> 
  group_by(NUTSc, country_name, country, year) |> 
  summarise(
    gini_nutsc = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTSc, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nutsc)
```

```{r}
gini_NUTSc |> 
  summary() |> 
  print(width = 80)
```

## "Nestete" datastruktur

Vi vil nå «neste» de ulike gini_NUTS\* datasettene og sette dem sammen til et nestet datasett "eu_dataset_nestet" som innholder alle dataene ovenfor i en fint ordnet struktur.

### Oppgave 19

Vi begynner med å "neste" dataene på NUTS2 nivå.

```{r}
# "Nester" NUTS2 data
gini_NUTS2_nest <- gini_NUTS2 |> 
  group_by(country_name, country) |> 
  nest(.key = "NUTS2_data") |> 
  ungroup()
```

### Oppgave 20

Videre "nester" vi dataene på NUTS1 nivå.

```{r}
# "Nester" NUTS1 data
gini_NUTS1_nest <- gini_NUTS1 |>
  group_by(country_name, country) |>
  nest(.key = "NUTS1_data") |>
  ungroup()
```

### Oppgave 21

Vi skal nå "neste" dataene på nasjonsnivå.

```{r}
# "Nester" NUTSc data
gini_NUTSc_nest <- gini_NUTSc |>
  group_by(country_name, country) |>
  nest(.key = "NUTSc_data") |>
  ungroup()
```

### Oppgave 22

Til slutt "nester" vi dataene på NUTS3 nivå og bruker en left_join() til legge til de "nestede" datasettene for NUTS2, NUTS1 og NUTSc.

```{r}
# Gini-koeffisient for NUTS3
gini_NUTS3 <- eu_data |> 
  group_by(NUTS3, country_name, country, year) |>
  
  summarise(
    gini_nuts3 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTS3, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nuts3)
```

```{r}
# "Nester" NUTS3
gini_NUTS3_nest <- gini_NUTS3 |>
  group_by(country_name, country) |>
  nest(.key = "NUTS3_data") |>
  ungroup()
```

```{r}
# Legger til de "nestede" datasettene for NUTS2, NUTS1 og NUTSc
eu_data_nested <- gini_NUTS3_nest |>
  left_join(gini_NUTS2_nest, join_by("country_name", "country")) |>
  left_join(gini_NUTS1_nest, join_by("country_name", "country")) |>
  left_join(gini_NUTSc_nest, join_by("country_name", "country"))
```

```{r}
# Rydder opp
rm(list = setdiff(ls(), c("eu_data", "eu_data_nested")))
```

```{r}
eu_data_nested
```

## Plots som viser utviklingen

### Oppgave 23

Vi skal nå generere ett plott som viser utviklingen i Gini-koeffisient på nasjonsnivå for de 16 landene.

```{r}
eu_data_nested |> 
  unnest(NUTSc_data) |>
  select(year, gini_nutsc, country_name) |>
  ggplot(aes(x = year, y = gini_nutsc, group = country_name, color = country_name)) +
  geom_line()
```

Tabellen under viser Gini i år 2020 for alle landene.

```{r}
eu_data_nested |> 
  unnest(NUTSc_data) |> 
  filter(year == 2020) |> 
  select(country_name, gini_nutsc) |> 
  arrange(desc(gini_nutsc)) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

### Oppgave 24

Ut i fra plottet ser vi at Gini-koeffisienten for Irland skyter til værs fra omlag år 2010.
Irland er også det landet med høyest Gini-verdi.
Vi skal nå se nærmere på utvikling i gini-koeffisient og gdp_per_capita for de ulike NUTS2 sonene i Irland.

I tabellen under ser vi en oversikt over utviklingen i Gini-koeffisient for NUTS2 sonene i Irland.

```{r}
eu_data_nested |> 
  filter(country_name == "Irland") |>
  unnest(NUTS2_data) |> 
  select(NUTS2, year, gini_nuts2) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

I tabellen under ser vi en oversikt over utviklingen i gdp_per_capita for de ulike NUTS2 sonene i Irland.

```{r}
eu_data_nested |> 
  filter(country_name == "Irland") |>
  unnest(NUTS2_data) |> 
  select(NUTS2, year, gdp_per_capita) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

Ut i fra tabellene ser vi en sammenheng mellom utviklingen i Gini-koeffisienten og GDP per capita i Irland.
For IE04 øker Gini-koeffisienten fra 2000 til 2020, noe som indikerer økt ulikhet i verdiskapningen.
Samtidig ser vi en jevn økning i GDP per capita fra 2000 til 2018, men en nedgang i 2019 og 2020.
For IE05 varierer Gini-koeffisienten gjennom årene, men det er en tydelig økning fra 2018 til 2020.
GDP per capita har hatt en jevn økning over hele perioden, med en betydelig økning fra 2018 til 2020.
For IE06 har Gini-koeffisienten variert, men hatt en markant økning fra 2016 til 2020.
GDP per capita har hatt en jevn økning fra 2000 til 2020.\

\
Det ser ut til å være en tendens til økende ulikhet i alle regionene mot slutten av perioden, spesielt fra 2018 til 2020.
For IE04 og IE06 ser vi at økning i Gini-koeffisienten korrelerer med økning i GDP oer capita.
For IE05 er sammenhengen mer kompleks, da Gini-koeffisienten og GDP per capita varierer uavhenging i visse år.
Kort forklart er årsaken til Irlands spesielle kurver at Apple Inc. restrukturerte sitt skatteopplegg.

## Hvordan er verdiskapningen fordelt mellom regionene i ulike land?

### Spania

#### Oppgave 25

25. Lager et line-plot som viser utviklingen i Gini-koeffisientene for NUTS2 regionene i Spania

```{r}
eu_data_nested |>
  filter(country_name == "Spania") |>
  unnest(NUTS2_data) |>
  select(NUTS2, year,gini_nuts2) |>
  ggplot(aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line()
```

#### Oppgave 26

26. Gjør tilsvarende for NUTS1 regionene i Spania

```{r}
eu_data_nested |>
  filter(country_name == "Spania") |>
  unnest(NUTS1_data) |>
  select(NUTS1, year,gini_nuts1) |>
  ggplot(aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line()
```

#### Oppgave 27

Gini-koeffisientene i 2020 spenner fra ca.
0.01 til over 0.1.
Det ser altså ut til å være noen forskjeller mellom NUTS2 regionene i Spania, de fleste ligger i spennet fra ca.
0,02 til ca.
0,05 noe som tilsier en relativit lik økonomisk aktivitet og moderat til middels ulikhet.
De gjennstående tre regionene spenner fra 0,08 til nesten 0,12 og disse er derfor noe mer ulike enn de andre noe som kan tyde på mindre økonomisk aktivitet og en mye større ulikhet.\

Ser vi på NUTS1 regionene har vi to med lav ulikhet, to med middels ulikhet og to med ekstrem ulikhet.
Dette kan forklare noe av grunnen til at så mange NUTS3 lå samlet, nemlig fordi spriket i NUTS1 er ganske gjennomsnittelig på middels forskjeller og man ser videre at forskjellene er både ganske små og store innenfor visse NUTS1 regioner.

#### Oppgave 28

28. Lag et line-plot (plottet vist i [Figur 3](https://msb105.netlify.app/assignments/h23/ass4/ass4-h23#fig-spania-gdppc-nuts2)) som viser utviklingen i gdp_per_capita (nominelle verdier) for de ulike NUTS2 regionene i Spania. Hva er det vi ser effekten av til høyre i [Figur 3](https://msb105.netlify.app/assignments/h23/ass4/ass4-h23#fig-spania-gdppc-nuts2)?

```{r}
eu_data_nested |>
  filter(country_name == "Spania") |>
  unnest(NUTS2_data) |>
  select(NUTS2, year,gdp_per_capita) |>
  ggplot(aes(x = year, y = gdp_per_capita, group = NUTS2, color = NUTS2)) +
  geom_line()
```

Det vi ser effekten av er at gdp per capita synker for alle regioner når covid19 ankom.

### Tyskland

#### Oppgave 29

29. Et line-plot som viser utviklingen i Gini-koeffisient for NUTS2 regionene i Tyskland:

```{r}
eu_data_nested |>
  filter(country_name == "Tyskland") |>
  unnest(NUTS2_data) |>
  select(NUTS2, year,gini_nuts2) |>
  ggplot(aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line()
```

#### Oppgave 30

Line-plot som viser utviklingen i Gini-koeffisient for NUTS1 regionene i Tyskland:

```{r}
eu_data_nested |>
  filter(country_name == "Tyskland") |>
  unnest(NUTS1_data) |>
  select(NUTS1, year,gini_nuts1) |>
  ggplot(aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line()
```

Vi finner samme trend i NUTS1 regionene.

### Frankrike

#### Oppgave 31

31. Utviklingen i Gini-koeffisient for NUTS2 regionene i Frankrike i et line-plot:

```{r}
eu_data_nested |>
  filter(country_name == "Frankrike") |>
  unnest(NUTS2_data) |>
  select(NUTS2, year,gini_nuts2) |>
  ggplot(aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line()
```

#### Oppgave 32

32. Utviklingen i Gini-koeffisient for NUTS1 regionene i Frankrike i et line-plot:

```{r}
eu_data_nested |>
  filter(country_name == "Frankrike") |>
  unnest(NUTS1_data) |>
  select(NUTS1, year,gini_nuts1) |>
  ggplot(aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line()
```

#### Oppgave 33

Vi ser at det store inntektsforskjeller i gdp i denne regionen, som kan være en idikator på at det er store forskjeller mellom de som har mest og de som har minst, som igjen resulterer i en høyere gini-faktor.
Vi ser også at dette er Paris--regionen, og man kan dermed tenke seg at hypotesen ovenfor stemmer i og med at det nok finnes svært velstående og langt mindre velstående områder her.
Vi skal undersøke dette nærmere nedenfor:

#### Oppgave 34

```{r}
eu_data |>
  filter(country_name == "Frankrike" & NUTS1 == "FR1") |>
  select(NUTS3, year, gdp_per_capita) |>
  arrange(NUTS3, year) |>
  flextable() |>
  width(1, width = 1.5) |>
  width(2, width = 1.5)

```

#### Oppgave 35

Det ser ut til at det er betydelige forskjeller i GDP per capita mellom ulike NUTS3-regioner i FR1.
Regioner som FR105 og FR101 har høyere GDP per capita sammenlignet med andre regioner som FR102 og FR108.
Dette skaper større ulikheter og forklarer den høye gini-faktoren.

## Enkle modeller

### "Data Science" modeller

#### Oppgave 36

```{r}
NUTS2_diff <- eu_data_nested |> 
  unnest(NUTS2_data) |> 
  mutate(
    # Når vi tar diff får vi en obs. mindre. Legger derfor inn en NA først
    # i vektoren
    diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
    diff_gini_nuts2 = c(NA, diff(gini_nuts2))
    ) |> 
  select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>% 
  # Fjerner obs. der vi har NA
  filter(complete.cases(.)) |> 
  group_by(country_name, country, NUTS2) |> 
  nest(.key = "NUTS2_diff")
```

#### Oppgave 37

```{r}
# Definerer en funksjon som passer en lineær modell
fit_model <- function(data) {
  lm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = data)
}

# Bruker map til å bruke funksjonen på hvert NUTS2_diff-element
NUTS2_diff <- NUTS2_diff %>%
  mutate(modell = map(NUTS2_diff, fit_model))
```

#### Oppgave 38

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_coeff = map_df(
      .x = modell,
      .f = coef
      )
    )
```

#### Oppgave 39

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_sum = map_df(
      .x = modell,
      .f = glance
      )
    )
```

#### Oppgave 40

```{r}
NUTS2_diff$mod_coeff |> 
  ggplot() +
  geom_density(mapping = aes(x = diff_gdp_per_capita), adjust = 0.6) +
  geom_vline(mapping = aes(xintercept = mean(diff_gdp_per_capita, na.rm = TRUE)), 
                           colour = "gray60",
                           linetype = "dashed")
```

#### Oppgave 41

```{r}
# Teller antall positive regresjonskoeffisienter
positive_coefficients <- sum(NUTS2_diff$mod_coeff$`diff_gdp_per_capita` > 0, na.rm = TRUE)

# Skriver ut resultatet
cat("Antall positive regresjonskoeffisienter for diff_gdp_per_capita er:", positive_coefficients, "\n")

```

#### Oppgave 42

```{r}
# Beregner gjennomsnittet av koeffisientene for diff_gdp_per_capita
mean_coefficient <- mean(NUTS2_diff$mod_coeff$`diff_gdp_per_capita`, na.rm = TRUE)

# Skriver ut resultatet
cat("Gjennomsnittet av koeffisientene for diff_gdp_per_capita er:", mean_coefficient, "\n")

```

#### Oppgave 43

```{r}
# Utfør t-test
t_test_result <- t.test(NUTS2_diff$mod_coeff$`diff_gdp_per_capita`, alternative = "greater")

# Skriv ut resultatet
cat("T-test for diff_gdp_per_capita:\n")
cat("Teststatistikk:", t_test_result$statistic, "\n")
cat("P-verdi:", t_test_result$p.value, "\n")

```

### Panel modell

#### Oppgave 44 og 45

```{r}
NUTS2_diff_pdata <- NUTS2_diff |>
  unnest(NUTS2_diff) %>%
  # dropper list-columns
  # Bruker %>% for å kunne benytte . for data
  select(-modell, -mod_coeff, -mod_sum)
```

```{r}
# Utfør panelregresjon
p_mod <- plm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = NUTS2_diff_pdata, index = c("NUTS2", "year"), model = "within")

# Skriv ut resultatene av regresjonen
summary(p_mod)

```

Tolkning av resultatene:

1.  **Residuals (Feil):**

    -   **Min. til Max.:** Dette viser spredningen av de beregnede feiltermene (residuals) i modellen. Minimumsverdien er -0.2643, og maksimumsverdien er 0.2851.

2.  **Coefficients (Koeffisienter):**

    -   **Estimate (Estimat):** 3.0221e-06 er estimert endring i Gini-koeffisienten for hver enhet endring i GDP per capita.
        Med andre ord, en liten positiv endring i GDP per capita er forbundet med en liten positiv endring i Gini-koeffisienten.

    -   **Std. Error (Standardfeil):** 1.3226e-07 er standardfeilen knyttet til estimatet.
        Dette gir en indikasjon på usikkerheten rundt estimatet.

    -   **t-value:** 22.849 er t-verdien, som er et mål på hvor langt estimatet er fra null, relativt til standardfeilen.
        Jo høyere t-verdien er, jo mer signifikant er koeffisienten.

    -   **Pr(\>\|t\|):** \< 2.2e-16 er p-verdien, som indikerer signifikansnivået.
        I dette tilfellet er p-verdien svært lav, noe som tyder på at koeffisienten er svært signifikant.

3.  **Model Fit (Modelltilpasning):**

    -   **Total Sum of Squares:** 1.9594 er den totale variansen i Gini-koeffisienten.

    -   **Residual Sum of Squares:** 1.6911 er den gjenværende variansen som ikke forklares av modellen.

    -   **R-Squared:** 0.13692 er R-kvadrat, som er et mål på hvor mye variasjon i Gini-koeffisienten modellen forklarer.
        Her forklarer modellen omtrent 13.7% av variansen.

    -   **Adj. R-Squared:** 0.091551 er justert R-kvadrat, som tar hensyn til antall prediktorer i modellen.
        Det justerte R-kvadratet er lavere enn R-kvadratet og tar hensyn til over-tilpasning.

4.  **F-statistic:** 522.094 er F-statistikken, som tester nullhypotesen om at alle koeffisientene i modellen er lik null.
    En høy F-verdi indikerer at modellen er signifikant.

5.  **P-value for F-statistic:** \< 2.22e-16 er p-verdien for F-statistikken, og den er svært lav.
    Dette indikerer at modellen som helhet er signifikant.

Samlet sett tyder resultatene på at det er en signifikant sammenheng mellom endringer i GDP per capita og endringer i Gini-koeffisienten, og at modellen er statistisk signifikant.

#### Oppgave 46

```{r}
summary(p_mod, vcov = function(x) vcovHC(x, method = "white2"))
```

I den siste koden bruker du vcov-argumentet i summary-funksjonen for å tilpasse standardfeilene ved hjelp av robust standardfeilsmetode (vcovHC med method = "white2").
Dette gir deg heteroskedastisitet-korrigerte standardfeil i tillegg til de vanlige standardfeilene.

Sammenligning av resultatene fra de to summary-kallene:

1.  Vanlig summary-kall:

-   Standardfeilene er basert på antagelsen om homoskedastisitet (konstant feilvarians).
-   t-verdien for diff_gdp_per_capita er 22.849.
-   Antall frihetsgrader er basert på det totale antallet observasjoner (DF), som er 3291.
-   F-statistikken er 522.094.

1.  summary-kall med robuste standardfeil:

-   Standardfeilene er basert på heteroskedastisitet-robuste standardfeil (vcovHC med method = "white2").
-   t-verdien for diff_gdp_per_capita er 18.538.
-   Antall frihetsgrader er basert på antall grupper (NUTS2) og antall tidspunkter (year), som er 173 og 172.
-   F-statistikken er 343.639.

Forskjellene i t-verdier og F-statistikken indikerer at de robuste standardfeilene gir annerledes inferens om signifikansnivået.
I tillegg indikerer bruk av robuste standardfeil en form for korrigering for mulig heteroskedastisitet i feiltermen.

Generelt er bruken av robuste standardfeil spesielt relevant når det er mistanke om at feilvariansen kan være heteroskedastisk.
Hvis antagelsen om homoskedastisitet brytes, kan de robuste standardfeilene gi mer pålitelige inferenser om parameterestimatene.
